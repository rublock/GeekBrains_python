# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть
# реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# целочисленное (с округлением до целого) деление клеток, соответственно. Сложение. Объединение двух клеток. При этом число ячеек
# общей клетки должно равняться сумме ячеек исходных двух клеток. Вычитание. Участвуют две клетки. Операцию необходимо выполнять
# только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет
# организовать ячейки по рядам. Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно
# переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.
import math


class Cell:

    def __init__(self, cell_num):
        self.cell_num = cell_num

    def __str__(self):
        return f'{self.cell_num}'

    def __add__(self, other):
        return Cell(self.cell_num + other.cell_num)

    def __sub__(self, other):
        if len(self.cell_num) - len(other.cell_num) >= 0:
            return (len(self.cell_num) - len(other.cell_num)) * '*'
        else:
            print('разница клеток не может быть отрицательной')
            # Дамир, после этого сообщения вылезает None, не могу понять почему

    def __mul__(self, other):
        return (len(self.cell_num) * len(other.cell_num)) * '*'

    def __truediv__(self, other):
        return (len(self.cell_num) // len(other.cell_num)) * '*'

    def make_order(self, count):
        str = ''
        if len(self.cell_num) > count:
            for i in range(len(self.cell_num) // count):
                str += count * '*' + '\n'
            str += len(self.cell_num) % count * '*' + '\n'
            return str


cell_1 = Cell('**********')
print(cell_1.make_order(5))
cell_2 = Cell('**************')
print(cell_2.make_order(5))
print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 / cell_2)
